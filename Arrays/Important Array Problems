## **1. Two Sum - LeetCode #1**
# **Approach:** Use a hashmap to store complement and check if it's seen before

def twoSum(nums, target):
    lookup = {}
    for i, num in enumerate(nums):
        if target - num in lookup:
            return [lookup[target - num], i]
        lookup[num] = i

## **2. Best Time to Buy and Sell Stock - LeetCode #121**
# **Approach:** Track the minimum price so far and the max profit on each day

def maxProfit(prices):
    min_price = float('inf')
    max_profit = 0
    for price in prices:
        min_price = min(min_price, price)
        max_profit = max(max_profit, price - min_price)
    return max_profit

## **3. Move Zeroes - LeetCode #283**
# **Approach:** Move non-zero elements forward, then fill rest with zeroes

def moveZeroes(nums):
    insert_pos = 0
    for num in nums:
        if num != 0:
            nums[insert_pos] = num
            insert_pos += 1
    for i in range(insert_pos, len(nums)):
        nums[i] = 0

## **4. Contains Duplicate - LeetCode #217**
# **Approach:** Use a set to track seen elements

def containsDuplicate(nums):
    return len(nums) != len(set(nums))

## **5. Maximum Subarray - LeetCode #53**
# **Approach:** Kadane’s algorithm, keep running sum or restart if it drops below 0

def maxSubArray(nums):
    current = result = nums[0]
    for n in nums[1:]:
        current = max(n, current + n)
        result = max(result, current)
    return result

## **6. Merge Intervals - LeetCode #56**
# **Approach:** Sort intervals and merge overlapping ones

def merge(intervals):
    intervals.sort(key=lambda x: x[0])
    merged = [intervals[0]]
    for start, end in intervals[1:]:
        if start <= merged[-1][1]:
            merged[-1][1] = max(merged[-1][1], end)
        else:
            merged.append([start, end])
    return merged

## **7. Kadane's Algorithm (max sum subarray) - LeetCode #53**
# **Approach:** Maintain max ending here and max so far

def kadane(nums):
    max_current = max_global = nums[0]
    for num in nums[1:]:
        max_current = max(num, max_current + num)
        max_global = max(max_global, max_current)
    return max_global

## **8. Find the Duplicate Number - LeetCode #287 (Floyd's Cycle)**
# **Approach:** Use Floyd’s cycle detection in array interpreted as linked list

def findDuplicate(nums):
    slow = fast = 0
    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break
    slow2 = 0
    while slow != slow2:
        slow = nums[slow]
        slow2 = nums[slow2]
    return slow

## **9. Product of Array Except Self - LeetCode #238**
# **Approach:** Prefix and suffix multiplication arrays

def productExceptSelf(nums):
    res = [1] * len(nums)
    left = 1
    for i in range(len(nums)):
        res[i] = left
        left *= nums[i]
    right = 1
    for i in range(len(nums)-1, -1, -1):
        res[i] *= right
        right *= nums[i]
    return res

## **10. Maximum Product Subarray - LeetCode #152**
# **Approach:** Track max and min product due to negatives

def maxProduct(nums):
    max_prod = min_prod = result = nums[0]
    for num in nums[1:]:
        candidates = (num, max_prod * num, min_prod * num)
        max_prod = max(candidates)
        min_prod = min(candidates)
        result = max(result, max_prod)
    return result

## **11. Rotate Array - LeetCode #189**
# **Approach:** Slice the array at rotation point

def rotate(nums, k):
    k %= len(nums)
    nums[:] = nums[-k:] + nums[:-k]

## **12. Intersection of Two Arrays II - LeetCode #350**
# **Approach:** Use counters to find common elements and frequencies

def intersect(nums1, nums2):
    from collections import Counter
    counts = Counter(nums1)
    result = []
    for num in nums2:
        if counts[num] > 0:
            result.append(num)
            counts[num] -= 1
    return result

## **13. Find All Numbers Disappeared in an Array - LeetCode #448**
# **Approach:** Mark visited indices by negating the values

def findDisappearedNumbers(nums):
    for num in nums:
        index = abs(num) - 1
        nums[index] = -abs(nums[index])
    return [i + 1 for i in range(len(nums)) if nums[i] > 0]

## **14. Longest Consecutive Sequence - LeetCode #128**
# **Approach:** Use a set and check only for the start of sequences

def longestConsecutive(nums):
    num_set = set(nums)
    longest = 0
    for num in nums:
        if num - 1 not in num_set:
            length = 1
            while num + length in num_set:
                length += 1
            longest = max(longest, length)
    return longest

## **15. Subarray Sum Equals K - LeetCode #560**
# **Approach:** Prefix sum with hashmap to count subarrays summing to k

def subarraySum(nums, k):
    from collections import defaultdict
    count = 0
    current_sum = 0
    prefix_sums = defaultdict(int)
    prefix_sums[0] = 1
    for num in nums:
        current_sum += num
        count += prefix_sums[current_sum - k]
        prefix_sums[current_sum] += 1
    return count
